name:  CI with qt, py3.11
# includes qt-related tests

on:
  workflow_dispatch:

env:
  OS: "linux"
  PYTHON_VERSION: "3.11"
  REQUIREMENTS_FILE: "requirements-all-linux-py3.11.txt"

jobs:
  check:
    name: "CI with ubuntu, py3.11, pip"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Install and upgrade"
        run: |
          python -m pip install --upgrade pip
      - name: "Install locan[dev]"
        run: |
          python -m pip install .[dev]
      - name: "Format with black"
        run: black --check --diff "."
      - name: "Lint with ruff"
        run: ruff --output-format=github "."
      - name: "Type check with mypy"
        run: mypy

      # For testing with Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      - name: "Install locan[test]"
        run: pip install .[test-qt]
      - name: "Run tests"
        if: runner.os != 'Windows'
        uses: coactions/setup-xvfb@v1
        with:
          run: pytest
      - name: "Run tests on Windows"
        if: runner.os == 'Windows'
        env:
          MPLBACKEND: agg
        run: pytest

      - name: "Install and upgrade"
        run: |
          pip install pip-tools
      - name: "Install locan with extra requirements"
        run: |
          pip install .[all]
      - name: "Run tests"
        uses: coactions/setup-xvfb@v1
        with:
          run: coverage run -m pytest --junitxml=./test-results-${{ env.PYTHON_VERSION }}.xml
      - name: "Prepare coverage reports"
        run: coverage xml
      - name: "Check coverage"
        run: coverage report --fail-under=90

      - name: "Upload coverage to CodeCov"
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: coverage.xml
          flags: unittests
          name: "CodeCov report"
          verbose: true

      - name: "Freeze requirements"
        run: pip-compile pyproject.toml --extra test --output-file ${{ env.REQUIREMENTS_FILE }}
      - name: "Upload requirements file"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REQUIREMENTS_FILE }}
          path: ${{ env.REQUIREMENTS_FILE }}
